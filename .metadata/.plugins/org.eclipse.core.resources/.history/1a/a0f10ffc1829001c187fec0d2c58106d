package com.challange;

import java.awt.List;
import java.util.ArrayList;
import java.util.Scanner;


class CharacterNode{
	String value;
	CharacterNode leftNode;
	CharacterNode rightNode;
	
	public CharacterNode(String value) {
		this.value = value;
		this.leftNode = null;
		this.rightNode = null;
	}
}

public class LabelOrderTraversal {
	
	public static class Queue{
		ArrayList<CharacterNode> list;
		
		public Queue() {
			list = new ArrayList<>();
		}
		
		public void enQueue(CharacterNode node) {
			list.add(node);
		}
		
		public CharacterNode deQueue() {
			return list.remove(list.size()-1);
		}
	}
	
	

	public static void insertLeft(CharacterNode parentNode,String value) {
		if(parentNode.leftNode != null)
			parentNode.leftNode = new CharacterNode(value);
	}
	
	public static void insertRight(CharacterNode parentNode,String value) {
		if(parentNode.rightNode != null)
			parentNode.rightNode = new CharacterNode(value);
	}
	
	public static void main(String args[]) {
		
		CharacterNode root,temp;
		Scanner sc = new Scanner(System.in);
		int nodeCount=0,numberOfNode = sc.nextInt();
		
		System.out.print("Root=");
		String c = sc.next();
		while(c.equals(" ")) {
			c = sc.next();
		}
		root = new CharacterNode(c);
		Queue queue = new Queue();
		queue.enQueue(root);
		nodeCount++;
		temp = queue.deQueue();
		while(temp != null) {
			
				System.out.println(" Left Node of = "+temp.value);
				c = sc.next();
				if(!c.equals(" ")) {
					insertLeft(temp, c);
					nodeCount++;
				}
				if(nodeCount==numberOfNode) break;
				System.out.println(" Right Node of = "+temp.value);
				c = sc.next();
				if(!c.equals(" ")) {
					insertRight(temp, c);
					nodeCount++;
				}
			
		}
		
	}
}
